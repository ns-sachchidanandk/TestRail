{
    "id": 2084760,
    "title": "JWT signing with valid input parameters with mTLS(client: GEF, server:TCS): \ntenant_id, device_id, profile_name",
    "section_id": 137215,
    "template_id": 1,
    "type_id": 6,
    "priority_id": 4,
    "milestone_id": null,
    "refs": null,
    "created_by": 767,
    "created_on": 1718621095,
    "updated_by": 729,
    "updated_on": 1738516706,
    "estimate": null,
    "estimate_forecast": null,
    "suite_id": 2105,
    "display_order": 1,
    "is_deleted": 0,
    "case_assignedto_id": null,
    "custom_automation_type": 0,
    "custom_automatable": 1,
    "custom_automated": 1,
    "custom_deprecatedtestcase": false,
    "custom_ui_case": 1,
    "custom_automation_id": null,
    "custom_hack_functional_sub_categories": 1,
    "custom_hack_test_categories": 3,
    "custom_hack_jira_escalated": false,
    "custom_appliance_support": 2,
    "custom_testrail_bdd_scenario": null,
    "custom_summary": null,
    "custom_preconds": null,
    "custom_steps": "1. curl API call to TCS for signing with client cert and\nclient private key for mTLS\n2. API params:\ntenant_id: tenant_id which is tobe authenticated\ndevice_id: NS station Id\nprofile_name: \n3. check the response from TCS to be in the below\nformat : x.y.z (in Base64 encoding)\nx: header\ny: payload\nz: Signature\n4. Verify the signature(z) with open standard libs(openssl, Py)\nwith RS256 Algo & original msg with tenant Public Key",
    "custom_expected": "1. TCS signing should be successful.\n2. Validate the API response to be in\nproper format (x.y.z)\nx: should contain Alg used and token type\ny: payload info like tenant_id, device_id, token expiration date\nz: Signature\n3. Signature verification with standard libs\nshould be successful\n4. Verify from the payload that token expiry is 30 days.",
    "custom_steps_separated": null,
    "custom_mission": null,
    "custom_goals": null,
    "comments": []
}